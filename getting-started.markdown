---

layout: page

---

# Getting Started

This page provides a walkthrough of getting setup and building a simple automated build to demonstrate some of the core features of powerdelivery. We'll just scratch the surface - to automate the release of your product, you'll want to read the rest of the topics when you're done here.

<a name="setup"></a>

## Set up your dev box or build server

Powerdelivery can be run directly from a developer's computer, or you can set it up to run automatically when developers check code into their source control repository. Either way, the computer that will run powerdelivery needs the following components:

* Windows 7, 8.1, or 10; or Windows Server 2008 R2 or 2012
* PowerShell 3.0 or greater
* Tools for compiling assets into deliverables (Visual Studio, Java, Grunt, etc.)
* Open ports in the firewall from the computer to any nodes it will deploy to

## Install powerdelivery

Before you can use powerdelivery you'll need to install it onto your developer's computer, and your build server (if using one).

### Method A: Installing with chocolatey

The easiest way to install powerdelivery is with the <a href="http://www.chocolatey.org" target="_blank">chocolatey</a> package manager. To use this method you must permit PowerShell scripts downloaded from the internet to run on the computer. To do this, open a PowerShell Administrator console and enter the command below:

<br />

<div class="row">
  <div class="col-sm-8">
    {% include console_title.html %}
    <div class="console">
{% highlight powershell %}
PS> Set-ExecutionPolicy Unrestricted
{% endhighlight %}
    </div>
  </div>
</div>

Once you have allowed scipts to run from the Internet and installed chocolatey, open a PowerShell Administrator console and enter the following command:

<br />

<div class="row">
	<div class="col-sm-8">
    {% include console_title.html %}
		<div class="console">
{% highlight powershell %}
PS> choco install PowerDelivery
{% endhighlight %}
		</div>
	</div>
</div>

After this completes, close and re-open an Administrator PowerShell console.

<br />

### Method B: Installing from source

If you are not permitted to run scripts from the Internet due to IT policies, you must install from source and digitally sign the module with your company's certificate. The source is available from github. Use your favorite git tool and clone the following repo:

https://github.com/eavonius/powerdelivery.git

Once you have the code in a local directory, modify the PSMODULEPATH environment variable by appending the *Modules* subdirectory of powerdelivery. You can do this with the Windows *System* control panel application. For example, if you cloned the github repo into *C:\Powerdelivery* append this to the end of your PSMODULEPATH:

*;C:\Powerdelivery\Modules*

Once you've set this variable, close any open consoles and re-open an Administrator PowerShell console.

## Create a project

Powerdelivery includes the [New-DeliveryProject](reference.html#new_deliveryproject_cmdlet) cmdlet that can be run from your console to generate an intial project. You'll want to store the files generated by this cmdlet in source control. If you want to store your powerdelivery project along with the product's source code, first pull your source into a local directory. 

In the example below, imagine a product's source code has been pulled into the directory *C:\Projects\MyApp* and the name of the product is *MyApp*. We decide to allow developers to deploy on their local computers; have another environment for user acceptance testing, and one for production.

<div class="row">
	<div class="col-sm-8">
    {% include console_title.html %}
    <div class="console">
{% highlight powershell %}
PS> New-DeliveryProject MyApp @('Local', 'Test', 'Production')
{% endhighlight %}
		</div>
	</div>
</div>

After this cmdlet completes you'll be left with the following directory structure:

<div class="row">
	<div class="col-sm-8">
		<pre class="directory-tree">
C:\Projects\MyApp\MyAppDelivery
  |-- Configuration
      |-- _Shared.ps1
      |-- Local.ps1
      |-- Test.ps1
      |-- Production.ps1
  |-- Credentials
  |-- Environments
      |-- Local.ps1
      |-- Test.ps1
      |-- Production.ps1
  |-- Roles
  |-- Targets
      |-- Release.ps1</pre>
	</div>
</div>
<br />
Because we specified three environment names as the second parameter to the cmdlet, powerdelivery generated files specific to each environment as appropriate. You could name these whatever makes sense for your particular method of release. We'll disect each of the above directories and generated files in the sections that follow.

<a name="infrastructure"></a>

## Configure environments

Next you need to tell powerdelivery what nodes will host the product in each environment. This will be totally dependent on your application.

Imagine our test environment will have two web server nodes and one database server node. In production, there will be four web servers and two database servers that have been setup for fault tolerance by being part of a Windows cluster.

With these decisions made, we fill out [environment scripts](environments.html):

<br />

<div class="row">
	<div class="col-sm-8">
{% highlight powershell %}
param($target, $config)
@{
  Build = ('localhost');
  Database = ('localhost');
  Website = ('localhost')
}
{% endhighlight %}
    <div class="filename">MyAppDelivery\Environments\Local.ps1</div>
	</div>
</div>

<div class="row">
	<div class="col-sm-8">
{% highlight powershell %}
param($target, $config)
@{
  Build = ('localhost');
  Database = ('x.x.x.1');
  Website = ('x.x.x.2', 'x.x.x.3')
}
{% endhighlight %}
    <div class="filename">MyAppDelivery\Environments\Test.ps1</div>
	</div>
</div>

<div class="row">
	<div class="col-sm-8">
{% highlight powershell %}
param($target, $config)
@{
  Build = ('localhost');
  Database = ('x.x.x.4','x.x.x.5');
  Website = ('x.x.x.6','x.x.x.7','x.x.x.8','x.x.x.9')
}
{% endhighlight %}
    <div class="filename">MyAppDelivery\Environments\Production.ps1</div>
  </div>
</div>

Notice each script file is named after the environment. Also, the IP addresses can instead be computer names if resolvable through DNS or NetBIOS. We've set the *Build* group of nodes to always specify localhost. This ensures that any actions performed on this set of nodes are run on the developer's computer (or the build server) and not a test or production node. 

This example assumes the nodes are already running. If you need to provision nodes on the fly (for A/B deployments) see the [environments](environments.html) topic. This is what the [$target](reference.html#target_parameter) and [$config](reference.html#config_parameter) parameters are for - you can ignore them for now.

<a name="roles"></a>

## Create a role

In powerdelivery, a role is a script intended to apply a set of changes to a node to enable it to serve a particular function in your overall product's architecture. This is where the heavy lifting of your deployment is done. Whatever nodes are configured to run this role will actually execute the script directly on that computer. Roles might deploy a website, run scripts against a database, or install dependencies using [oneget](https://github.com/OneGet/oneget) or [chocolatey](http://www.chocolatey.org). Powerdelivery doesn't create roles for you so let's dig into creating one.

The most common thing needed before any deployment of a release can occur on most Windows projects is compiling of code. To do this, we'll use powerdelivery's included [Invoke-MSBuild](refresh.html#invoke_msbuild_cmdlet) cmdlet to compile a Visual Studio solution.

<br />

<div class="row">
  <div class="col-sm-8">
{% highlight powershell %}
Delivery:Role {
  param($target, $config, $node)

  Invoke-MSBuild -ProjectFile MyApp.sln
}
{% endhighlight %}
    <div class="filename">MyAppDelivery\Roles\Compile\Tasks.ps1</div>
  </div>
</div>

The *Delivery:Role* statement contains all code that will execute when this role is applied to a node as part of a [target](targets.html). The second line declares the three special parameters that are passed to every role. These are the [$target parameter](reference.html#target_parameter) (which provides many properties you can use in your role), the [$config parameter](reference.html#config_parameter) to allow you to access [configuration variables](configuration.html), and the [$node parameter](reference.html#node_parameter) which contains the name or IP address of the node the role is currently executing on. We're not using them here so you can ignore them for now.

<a name="targets"></a>

## Create a target

In powerdelivery, every sequential deployment process you want to complete during one run is represented by a target script. You can [read more about targets here](targets.html). We'll use the default *Release.ps1* script generated by the [New-DeliveryProject](reference.html#new_deliveryproject_cmdlet) cmdlet:

<br />

<div class="row">
	<div class="col-sm-8">
{% highlight powershell %}
[ordered]@{
  "Building the product" = @{
    Roles = ('Compile');
    Nodes = ('Build')
  }
}
{% endhighlight %}
  <div class="filename">MyAppDelivery\Targets\Release.ps1</div>
	</div>
</div>

The *ordered* keywords tells powerdelivery to run these steps in sequence. The key of each step will be displayed as a status message, it can be whatever you like. *Roles* is an array of any roles that should be applied when this step is reached. In this case we will apply the *Compile* role we implemented in the role script earlier. Lastly, *Nodes* is a reference to the environment scripts that specifies what set of computing nodes will have the roles applied on them.

That's a mouthful. In layman's terms, this code says "When *building the product*, apply the *compile* role to the *build* nodes in the environment".

## Run a target

To run a target, use the [Start-Delivery](reference.html#start_delivery_cmdlet) cmdlet. This cmdlet takes takes the name of the project as the first parameter, the target to run as the second, and the environment to apply the target to as the third. 

The console session below demonstrates starting delivery from the directory above your powerdelivery project (*C:\Projects\MyApp* in this case) to run the *Release* target in the *Local* environment:

<br />

<div class="row">
  <div class="col-sm-8">
    {% include console_title.html %}
    <div class="console">
{% highlight powershell %}
PS> Start-Delivery MyApp Release Local

PowerDelivery v3.0.1
Target "Release" started by MYDOMAIN\me
Delivering "MyApp" to "Local" environment...

[----- Building the product
[---------- Compile -> (localhost)

Target "Release" succeeded in 1 sec 857 ms.
{% endhighlight %}
    </div>
  </div>
</div>

Upon running the command you will see a build log in PowerShell similar to above that shows who ran the build, which targets and environment were selected, and the progress of the roles being applied to each node. If any errors occur you will need to resolve them and try your target again.

Now that you've had an overview of powerdelivery, follow the directions on this page to install it and create your own project, and continue by reading about [environments](environments.html) in more detail.